version: '3.8'

services:
  postgres:
    container_name: keycloak_postgres
    image: postgres:${POSTGRES_VERSION:-latest}
    volumes:
      - ./postgres_data:/var/lib/postgresql/data # all changes in database will be stored in this volume
      - ./postgres_init/01-init.sh:/docker-entrypoint-initdb.d/init-db.sh # used only first time container is built to create database and users
    environment:
      - "POSTGRES_USER=postgres"
      - "POSTGRES_PASSWORD=postgres"
      - "KEYCLOAK_DB=keycloak"
      - "KEYCLOAK_DB_USER=keycloak"
      - "KEYCLOAK_DB_PASSWORD=keycloak"
      - "KEYCLOAK_DB_SCHEMA=keycloak"
    ports:
      - "5442:5432"
    expose:
      - 5442
    healthcheck:
      test: [ "CMD", "pg_isready", "-d", "postgres", "-U", "postgres" ]
      timeout: 5s
      interval: 10s
      retries: 10
    restart: "no"
    networks:
      - ${GLOBAL_NETWORK:-services}
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 256M

#  keycloak-authorization-server:
#    image: quay.io/keycloak/keycloak:${KEYCLOAK_VERSION:-latest}
#    hostname: keycloak-server
#    ports:
#      - "9091:9091"
#    environment:
#      - "KEYCLOAK_USER=admin"
#      - "KEYCLOAK_PASSWORD=admin"
#      - "JAVA_OPTS=-Djboss.http.port=9091"
#      - "DB_VENDOR=POSTGRES"
#      - "DB_ADDR=host.docker.internal"
#      - "DB_DATABASE=keycloak"
#      - "DB_USER=keycloak"
#      - "DB_SCHEMA=keycloak"
#      - "DB_PASSWORD=keycloak"
#    networks:
#      - ${GLOBAL_NETWORK:-services}

  keycloak-authorization-server:

    container_name: keycloak-server
    image: quay.io/keycloak/keycloak:${KEYCLOAK_VERSION:-latest}
    hostname: keycloak-server
    ports:
      - "9091:9091"
    volumes:
      - ./keycloak/realms/export:/tmp/export
#      - ./check-postgres-started.sh:/opt/keycloak/bin/check-postgres-started.sh
#    entrypoint: [ "sh", "-c", "/opt/keycloak/bin/check-postgres-started.sh && /opt/keycloak/bin/kc.sh", "start-dev", "--http-port", "9091" ]
#    entrypoint: [ "sh", "-c", "/opt/keycloak/bin/check-postgres-started.sh" ]
    entrypoint: [ "/opt/keycloak/bin/kc.sh", "start-dev", "--http-port", "9091" ]
#    command: ./check-postgres-started.sh
    environment:
      - "KEYCLOAK_ADMIN=admin"
      - "KEYCLOAK_ADMIN_PASSWORD=admin"
      - "KC_LOG_LEVEL=INFO"
      - "KC_DB=postgres" # database type
      - "KC_DB_USERNAME=keycloak"
      - "KC_DB_PASSWORD=keycloak"
      - "KC_DB_SCHEMA=keycloak" # only public schema works?
      - "KC_DB_URL_DATABASE=keycloak" # database to use
      - "KC_DB_URL_HOST=postgres" # postgres service defined above
      - "KC_DB_URL_PORT=5432"
    # https://docs.docker.com/compose/compose-file/05-services/#depends_on
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ${GLOBAL_NETWORK:-services}

  twitter-to-kafka-service:
    container_name: twitter-to-kafka-service
    image: ${GROUP_ID}/twitter.to.kafka.service:${SERVICE_VERSION:-latest}
    ports:
      - "5005:5005"
    volumes:
      - "./docker-logs:/workspace/twitter-to-kafka-service/logs"
      - "./check-config-server-started.sh:/usr/local/bin/check-config-server-started.sh"
      - "./check-keycloak-server-started.sh:/usr/local/bin/check-keycloak-server-started.sh"
    user: root
    entrypoint: ["check-config-server-started.sh"]
#    command: /bin/sh -c "/usr/local/bin/check-config-server-started.sh"
    # O depends_on, apenas verifica se o container está rodando, mas não se a aplicação está rodando
    depends_on:
#      - config-server
#      - kafka-broker-1
#      - kafka-broker-2
#      - kafka-broker-3
      config-server:
        condition: service_healthy
      kafka-broker-1:
        condition: service_healthy
      kafka-broker-2:
        condition: service_healthy
      kafka-broker-3:
        condition: service_healthy
    # Substitui algumas variáveis do application.yml para rodar no Docker como:
    #   KAFKA-CONFIG_TOPIC-NAME, KAFKA-CONFIG_BOOTSTRAP-SERVERS,
    #   KAFKA-CONFIG_SCHEMA-REGISTRY-URL e TWITTER-TO-KAFKA-SERVICE_ENABLE-MOCK-TWEETS
    environment:
      - "JAVA_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005 -Xms128m -Xmx256m"
      - "LOGGING_LEVEL_COM_MICROSERVICES_DEMO=error"
      - "LOGGING_LEVEL_ROOT=error"
      - "KAFKA-CONFIG_TOPIC-NAME=twitter-topic"
      - "KAFKA-CONFIG_TOPIC-NAMES-TO-CREATE_0=twitter-topic"
      - "KAFKA-CONFIG_TOPIC-NAMES-TO-CREATE_1=twitter-analytics-topic"
      - "KAFKA-CONFIG_BOOTSTRAP-SERVERS=kafka-broker-1:9092, kafka-broker-2:9092, kafka-broker-3:9092"
      - "KAFKA-CONFIG_SCHEMA-REGISTRY-URL=http://schema-registry:8081"
      - "TWITTER-TO-KAFKA-SERVICE_ENABLE-MOCK-TWEETS=true"
      - "SPRING_CLOUD_CONFIG_URI=http://config-server:8888"
      - "ENCRYPT_KEY=${ENCRYPT_KEY}"
    healthcheck:
      test: nc -z localhost 5005 || exit -1
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - ${GLOBAL_NETWORK:-services}

  kafka-to-elastic-service:
    container_name: kafka-to-elastic-service
    image: ${GROUP_ID}/kafka.to.elastic.service:${SERVICE_VERSION:-latest}
    ports:
      - "5006:5006"
    volumes:
      - "./docker-logs:/workspace/kafka-to-elastic-service/logs"
      - "./check-kafka-topics-created.sh:/usr/local/bin/check-kafka-topics-created.sh"
    user: root
    entrypoint: ["check-kafka-topics-created.sh"]
#    command: /bin/sh -c "/usr/local/bin/check-kafka-topics-created.sh"
    depends_on:
#      - config-server
#      - twitter-to-kafka-service
#      - kafka-broker-1
#      - kafka-broker-2
#      - kafka-broker-3
#      - elastic-1
#      - elastic-2
#      - elastic-3
      config-server:
        condition: service_healthy
      twitter-to-kafka-service:
        condition: service_healthy
      kafka-broker-1:
        condition: service_healthy
      kafka-broker-2:
        condition: service_healthy
      kafka-broker-3:
        condition: service_healthy
      elastic-1:
        condition: service_healthy
      elastic-2:
        condition: service_healthy
      elastic-3:
        condition: service_healthy
    environment:
      - "JAVA_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5006 -Xms128m -Xmx256m"
      - "LOGGING_LEVEL_COM_MICROSERVICES_DEMO=error"
      - "LOGGING_LEVEL_ROOT=error"
      - "KAFKA-CONFIG_TOPIC-NAME=twitter-topic"
      - "KAFKA-CONFIG_BOOTSTRAP-SERVERS=kafka-broker-1:9092, kafka-broker-2:9092, kafka-broker-3:9092"
      - "KAFKA-CONFIG_SCHEMA-REGISTRY-URL=http://schema-registry:8081"
      - "SPRING_CLOUD_CONFIG_URI=http://config-server:8888"
      - "ELASTIC-CONFIG_INDEX-NAME=twitter-index"
      - "ELASTIC-CONFIG_CONNECTION-URL=http://elastic-1:9200"
      - "ENCRYPT_KEY=${ENCRYPT_KEY}"
    networks:
      - ${GLOBAL_NETWORK:-services}

  # Serviço para configurações externas
  config-server:
    container_name: config-server
    # Estas variáveis de ambiente vem do arquivo .env
    image: ${GROUP_ID}/config.server:${SERVICE_VERSION:-latest}
    ports:
      - "5007:5007"
      - "8888:8888"
    volumes:
      - "./docker-logs:/workspace/config-server/logs"
    environment:
      - "JAVA_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5007 -Xms128m -Xmx256m"
      - "ENCRYPT_KEY=${ENCRYPT_KEY}"
    healthcheck:
      test: nc -z localhost 8888 || exit -1
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - ${GLOBAL_NETWORK:-services}

  elastic-query-service-1:
    container_name: elastic-query-service-1
    image: ${GROUP_ID}/elastic.query.service:${SERVICE_VERSION:-latest}
    ports:
      - "5008:5008"
      - "8183:8183"
    volumes:
      - "./docker-logs:/workspace/elastic-query-service/logs"
      - "./check-config-server-started.sh:/usr/local/bin/check-config-server-started.sh"
      - "./check-keycloak-server-started.sh:/usr/local/bin/check-keycloak-server-started.sh"
    user: root
    entrypoint: [ "check-config-server-started.sh" ]
    depends_on:
#      - config-server
#      - elastic-1
#      - elastic-2
#      - elastic-3
      config-server:
        condition: service_healthy
      elastic-1:
        condition: service_healthy
      elastic-2:
        condition: service_healthy
      elastic-3:
        condition: service_healthy
    environment:
      - "JAVA_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5008 -Xms128m -Xmx256m"
      - "LOGGING_LEVEL_COM_MICROSERVICES_DEMO=debug"
      - "LOGGING_LEVEL_ROOT=debug"
      - "ELASTIC-CONFIG_INDEX-NAME=twitter-index"
      - "ELASTIC-CONFIG_CONNECTION-URL=http://elastic-1:9200"
      - "SERVER_PORT=8183"
      - "SERVER_SERVLET_CONTEXT-PATH=/"
      - "SPRING_CLOUD_CONFIG_URI=http://config-server:8888"
      - "SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER-URI=http://keycloak-authorization-server:9091/auth/realms/microservices-realm"
      - "SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK-SET-URI=http://keycloak-authorization-server:9091/auth/realms/microservices-realm/protocol/openid-connect/certs"
      - "SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_TOKEN-URI=http://keycloak-authorization-server:9091/auth/realms/microservices-realm/protocol/openid-connect/token"
      - "SPRING_DATASOURCE_URL=jdbc:postgresql://keycloak_postgres:5432/keycloak?currentSchema=public&binaryTransfer=true&reWriteBatchedInserts=true"
      - "ELASTIC-QUERY-SERVICE_QUERY-FROM-KAFKA-STATE-STORE_URI=http://gateway-service/kafka-streams-service/get-word-count-by-word/{word}"
      - "ELASTIC-QUERY-SERVICE_QUERY-FROM-ANALYTICS-DATABASE_URI=http://gateway-service/analytics-service/get-word-count-by-word/{word}"
      - "ELASTIC-QUERY-SERVICE_WEBCLIENT_QUERY-TYPE=ANALYTICS_DATABASE"
#      - "EUREKA_CLIENT_SERVICE-URL_DEFAULT-ZONE=http://discovery-service-1:8761/eureka/,http://discovery-service-2:8762/eureka/"
      - "ENCRYPT_KEY=${ENCRYPT_KEY}"
    networks:
      - ${GLOBAL_NETWORK:-services}

  elastic-query-service-2:
    container_name: elastic-query-service-2
    image: ${GROUP_ID}/elastic.query.service:${SERVICE_VERSION:-latest}
    ports:
      - "5009:5009"
      - "8186:8186"
    volumes:
      - "./docker-logs:/workspace/elastic-query-service/logs"
      - "./check-config-server-started.sh:/usr/local/bin/check-config-server-started.sh"
      - "./check-keycloak-server-started.sh:/usr/local/bin/check-keycloak-server-started.sh"
    user: root
    entrypoint: [ "check-config-server-started.sh" ]
    depends_on:
#      - config-server
#      - elastic-1
#      - elastic-2
#      - elastic-3
      config-server:
        condition: service_healthy
      elastic-1:
        condition: service_healthy
      elastic-2:
        condition: service_healthy
      elastic-3:
        condition: service_healthy
    environment:
      - "JAVA_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5009 -Xms128m -Xmx256m"
      - "LOGGING_LEVEL_COM_MICROSERVICES_DEMO=debug"
      - "LOGGING_LEVEL_ROOT=debug"
      - "ELASTIC-CONFIG_INDEX-NAME=twitter-index"
      - "ELASTIC-CONFIG_CONNECTION-URL=http://elastic-1:9200"
      - "SERVER_PORT=8186"
      - "SERVER_SERVLET_CONTEXT-PATH=/"
      - "SPRING_CLOUD_CONFIG_URI=http://config-server:8888"
      - "SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER-URI=http://keycloak-authorization-server:9091/auth/realms/microservices-realm"
      - "SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK-SET-URI=http://keycloak-authorization-server:9091/auth/realms/microservices-realm/protocol/openid-connect/certs"
      - "SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_TOKEN-URI=http://keycloak-authorization-server:9091/auth/realms/microservices-realm/protocol/openid-connect/token"
      - "SPRING_DATASOURCE_URL=jdbc:postgresql://keycloak_postgres/keycloak?currentSchema=public&binaryTransfer=true&reWriteBatchedInserts=true"
      - "SPRING_DATASOURCE_INITIALIZATION-MODE=never"  # Colocado para que não faça a criação das tabelas e dados
      - "ELASTIC-QUERY-SERVICE_QUERY-FROM-KAFKA-STATE-STORE_URI=http://gateway-service/kafka-streams-service/get-word-count-by-word/{word}"
      - "ELASTIC-QUERY-SERVICE_QUERY-FROM-ANALYTICS-DATABASE_URI=http://gateway-service/analytics-service/get-word-count-by-word/{word}"
      - "ELASTIC-QUERY-SERVICE_WEBCLIENT_QUERY-TYPE=ANALYTICS_DATABASE"
#      - "EUREKA_CLIENT_SERVICE-URL_DEFAULT-ZONE=http://discovery-service-1:8761/eureka/,http://discovery-service-2:8762/eureka/"
      - "ENCRYPT_KEY=${ENCRYPT_KEY}"
    networks:
      - ${GLOBAL_NETWORK:-services}

  elastic-query-web-client-1:
    container_name: elastic-query-web-client-1
    image: ${GROUP_ID}/elastic.query.web.client:${SERVICE_VERSION:-latest}
    ports:
      - "5010:5010"
      - "8184:8184"
    volumes:
      - "./docker-logs:/workspace/elastic-query-web-client/logs"
      - "./check-config-server-started.sh:/usr/local/bin/check-config-server-started.sh"
      - "./check-keycloak-server-started.sh:/usr/local/bin/check-keycloak-server-started.sh"
    user: root
    entrypoint: [ "check-config-server-started.sh" ]
    depends_on:
      config-server:
        condition: service_healthy
    environment:
      - "JAVA_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5010 -Xms128m -Xmx256m"
      - "LOGGING_LEVEL_COM_MICROSERVICES_DEMO=debug"
      - "LOGGING_LEVEL_ROOT=debug"
      - "SERVER_PORT=8184"
      - "SERVER_SERVLET_CONTEXT-PATH=/elastic-query-web-client"
      - "SPRING_CLOUD_CONFIG_URI=http://config-server:8888"
      - "ELASTIC-QUERY-WEB-CLIENT_WEB-CLIENT_BASE-URL=http://gateway-service/elastic-query-service/documents"
      - "ELASTIC-QUERY-WEB-CLIENT_WEB-CLIENT_INSTANCES_0_ID=elastic-query-service-1"
      - "ELASTIC-QUERY-WEB-CLIENT_WEB-CLIENT_INSTANCES_0_HOST=elastic-query-service-1"
      - "ELASTIC-QUERY-WEB-CLIENT_WEB-CLIENT_INSTANCES_0_PORT=8183"
      - "ELASTIC-QUERY-WEB-CLIENT_WEB-CLIENT_INSTANCES_1_ID=elastic-query-service-2"
      - "ELASTIC-QUERY-WEB-CLIENT_WEB-CLIENT_INSTANCES_1_HOST=elastic-query-service-2"
      - "ELASTIC-QUERY-WEB-CLIENT_WEB-CLIENT_INSTANCES_1_PORT=8186"
      - "SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_ISSUER-URI=http://keycloak-authorization-server:9091/auth/realms/microservices-realm"
      - "SECURITY_LOGOUT-SUCCESS-URL=http://elastic-query-web-client-1:8184/elastic-query-web-client"
      - "SECURITY_DEFAULT-CLIENT-REGISTRATION-ID=keycloak"
      - "EUREKA_CLIENT_SERVICE-URL_DEFAULT-ZONE=http://discovery-service-1:8761/eureka/,http://discovery-service-2:8762/eureka/"
      - "ENCRYPT_KEY=${ENCRYPT_KEY}"
    networks:
      - ${GLOBAL_NETWORK:-services}

#  elastic-query-web-client-2:
#    container_name: elastic-query-web-client-2
#    image: ${GROUP_ID}/elastic.query.web.client.2:${SERVICE_VERSION:-latest}
#    ports:
#      - "5011:5011"
#      - "8185:8185"
#    volumes:
#      - "./docker-logs:/workspace/elastic-query-web-client/logs"
#      - "./check-config-server-started.sh:/usr/local/bin/check-config-server-started.sh"
#      - "./check-keycloak-server-started.sh:/usr/local/bin/check-keycloak-server-started.sh"
#    user: root
#    entrypoint: [ "check-config-server-started.sh" ]
#    depends_on:
#      config-server:
#        condition: service_healthy
#    environment:
#      - "JAVA_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5011 -Xms128m -Xmx256m"
#      - "LOGGING_LEVEL_COM_MICROSERVICES_DEMO=debug"
#      - "LOGGING_LEVEL_ROOT=debug"
#      - "SERVER_PORT=8185"
#      - "SERVER_SERVLET_CONTEXT-PATH=/elastic-query-web-client"
#      - "SPRING_CLOUD_CONFIG_URI=http://config-server:8888"
#      - "ELASTIC-QUERY-WEB-CLIENT_WEB-CLIENT_BASE-URL=http://elastic-query-service/elastic-query-service/documents"
#      - "ELASTIC-QUERY-WEB-CLIENT_WEB-CLIENT_INSTANCES_0_ID=elastic-query-service-1"
#      - "ELASTIC-QUERY-WEB-CLIENT_WEB-CLIENT_INSTANCES_0_HOST=elastic-query-service-1"
#      - "ELASTIC-QUERY-WEB-CLIENT_WEB-CLIENT_INSTANCES_0_PORT=8183"
#      - "ELASTIC-QUERY-WEB-CLIENT_WEB-CLIENT_INSTANCES_1_ID=elastic-query-service-2"
#      - "ELASTIC-QUERY-WEB-CLIENT_WEB-CLIENT_INSTANCES_1_HOST=elastic-query-service-2"
#      - "ELASTIC-QUERY-WEB-CLIENT_WEB-CLIENT_INSTANCES_1_PORT=8186"
#      - "SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_ISSUER-URI=http://keycloak-authorization-server:9091/auth/realms/microservices-realm"
#      - "SECURITY_LOGOUT-SUCCESS-URL=http://elastic-query-web-client-2:8185/elastic-query-web-client"
#      - "SECURITY_DEFAULT-CLIENT-REGISTRATION-ID=keycloak"
#      - "ENCRYPT_KEY=${ENCRYPT_KEY}"
#    networks:
#      - ${GLOBAL_NETWORK:-services}

  kafka-streams-service:
    container_name: kafka-streams-service
    image: ${GROUP_ID}/kafka.streams.service:${SERVICE_VERSION:-latest}
    ports:
      - "5012:5012"
      - "8187:8187"
    volumes:
      - "./docker-logs:/workspace/kafka-streams-service/logs"
      - "./check-config-server-started.sh:/usr/local/bin/check-config-server-started.sh"
      - "./check-keycloak-server-started.sh:/usr/local/bin/check-keycloak-server-started.sh"
    user: root
    entrypoint: [ "check-config-server-started.sh" ]
    depends_on:
      config-server:
        condition: service_healthy
    environment:
      - "JAVA_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5012 -Xms128m -Xmx256m"
      - "LOGGING_LEVEL_COM_MICROSERVICES_DEMO=debug"
      - "LOGGING_LEVEL_ROOT=debug"
      - "SERVER_PORT=8187"
      - "SERVER_SERVLET_CONTEXT-PATH=/"
      - "SPRING_CLOUD_CONFIG_URI=http://config-server:8888"
      - "SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER-URI=http://keycloak-authorization-server:9091/auth/realms/microservices-realm"
      - "SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK-SET-URI=http://keycloak-authorization-server:9091/auth/realms/microservices-realm/protocol/openid-connect/certs"
      - "KAFKA-CONFIG_BOOTSTRAP-SERVERS=kafka-broker-1:9092, kafka-broker-2:9092, kafka-broker-3:9092"
      - "KAFKA-CONFIG_SCHEMA-REGISTRY-URL=http://schema-registry:8081"
      - "EUREKA_CLIENT_SERVICE-URL_DEFAULT-ZONE=http://discovery-service-1:8761/eureka/,http://discovery-service-2:8762/eureka/"
      - "ENCRYPT_KEY=${ENCRYPT_KEY}"
    networks:
      - ${GLOBAL_NETWORK:-services}

  analytics-service:
    container_name: analytics-service
    image: ${GROUP_ID}/analytics.service:${SERVICE_VERSION:-latest}
    ports:
      - "5013:5013"
      - "8188:8188"
    volumes:
      - "./docker-logs:/workspace/analytics-service/logs"
      - "./check-config-server-started.sh:/usr/local/bin/check-config-server-started.sh"
      - "./check-keycloak-server-started.sh:/usr/local/bin/check-keycloak-server-started.sh"
    user: root
    entrypoint: [ "check-config-server-started.sh" ]
    depends_on:
      config-server:
        condition: service_healthy
    environment:
      - "JAVA_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5013 -Xms128m -Xmx256m"
      - "LOGGING_LEVEL_COM_MICROSERVICES_DEMO=error"
      - "LOGGING_LEVEL_ROOT=debug"
      - "SERVER_PORT=8188"
      - "SERVER_SERVLET_CONTEXT-PATH=/"
      - "SPRING_CLOUD_CONFIG_URI=http://config-server:8888"
      - "SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER-URI=http://keycloak-authorization-server:9091/auth/realms/microservices-realm"
      - "SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK-SET-URI=http://keycloak-authorization-server:9091/auth/realms/microservices-realm/protocol/openid-connect/certs"
      - "SPRING_DATASOURCE_URL=jdbc:postgresql://host.docker.internal:5440/postgres?currentSchema=analytics&binaryTransfer=true&reWriteBatchedInserts=true"
      - "KAFKA-CONFIG_BOOTSTRAP-SERVERS=kafka-broker-1:9092, kafka-broker-2:9092, kafka-broker-3:9092"
      - "KAFKA-CONFIG_SCHEMA-REGISTRY-URL=http://schema-registry:8081"
      - "EUREKA_CLIENT_SERVICE-URL_DEFAULT-ZONE=http://discovery-service-1:8761/eureka/,http://discovery-service-2:8762/eureka/"
      - "ENCRYPT_KEY=${ENCRYPT_KEY}"
    networks:
      - ${GLOBAL_NETWORK:-services}

  discovery-service-1:
    container_name: discovery-service-1
    image: ${GROUP_ID}/discovery.service:${SERVICE_VERSION:-latest}
    ports:
      - "5014:5014"
      - "8761:8761"
    volumes:
      - "./docker-logs:/workspace/discovery-service/logs"
    environment:
      - "JAVA_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5014 -Xms128m -Xmx256m"
      - "LOGGING_LEVEL_ROOT=debug"
      - "SERVER_PORT=8761"
      - "SPRING_PROFILES_ACTIVE=peer1"
      - "EUREKA_INSTANCE_HOSTNAME=discovery-service-1"
#      - "EUREKA_CLIENT_SERVICE-URL_DEFAULT-ZONE=http://discovery-service-1:8761/eureka/,http://discovery-service-2:8762/eureka/"
    networks:
      - ${GLOBAL_NETWORK:-services}

  discovery-service-2:
    container_name: discovery-service-2
    image: ${GROUP_ID}/discovery.service:${SERVICE_VERSION:-latest}
    ports:
      - "5015:5015"
      - "8762:8762"
    volumes:
      - "./docker-logs:/workspace/discovery-service/logs"
    environment:
      - "JAVA_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5015 -Xms128m -Xmx256m"
      - "LOGGING_LEVEL_ROOT=debug"
      - "SERVER_PORT=8762"
      - "SPRING_PROFILES_ACTIVE=peer2"
      - "EUREKA_INSTANCE_HOSTNAME=discovery-service-2"
    networks:
      - ${GLOBAL_NETWORK:-services}

  gateway-service:
    container_name: gateway-service
    image: ${GROUP_ID}/gateway.service:${SERVICE_VERSION:-latest}
    ports:
      - "5016:5016"
      - "9090:9090"
    volumes:
      - "./docker-logs:/workspace/gateway-service/logs"
      - "./check-config-server-started.sh:/usr/local/bin/check-config-server-started.sh"
      - "./check-keycloak-server-started.sh:/usr/local/bin/check-keycloak-server-started.sh"
    user: root
    entrypoint: [ "check-config-server-started.sh" ]
    # Ver arquivo redis_cluster.yml. O nome do serviço é redis-master e o hostname é redis
    links:
      - "redis-master:redis"
    environment:
      - "JAVA_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5016 -Xms128m -Xmx256m"
      - "LOGGING_LEVEL_ROOT=debug"
      - "SERVER_PORT=9090"
      - "SPRING_CLOUD_CONFIG_URI=http://config-server:8888"
      - "SPRING_REDIS_HOST=redis"
      - "EUREKA_CLIENT_SERVICE-URL_DEFAULT-ZONE=http://discovery-service-2:8762/eureka/,http://discovery-service-1:8761/eureka/"
      - "ENCRYPT_KEY=${ENCRYPT_KEY}"
    networks:
      - ${GLOBAL_NETWORK:-services}
